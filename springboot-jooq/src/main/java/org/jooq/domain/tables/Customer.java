/*
 * This file is generated by jOOQ.
 */
package org.jooq.domain.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.domain.Indexes;
import org.jooq.domain.Keys;
import org.jooq.domain.SpringbootDemo;
import org.jooq.domain.tables.records.CustomerRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 客户信息表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Customer extends TableImpl<CustomerRecord> {

    private static final long serialVersionUID = -634453622;

    /**
     * The reference instance of <code>springboot_demo.customer</code>
     */
    public static final Customer CUSTOMER = new Customer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomerRecord> getRecordType() {
        return CustomerRecord.class;
    }

    /**
     * The column <code>springboot_demo.customer.id</code>. 主键id
     */
    public final TableField<CustomerRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "主键id");

    /**
     * The column <code>springboot_demo.customer.name</code>. 客户姓名
     */
    public final TableField<CustomerRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(30), this, "客户姓名");

    /**
     * The column <code>springboot_demo.customer.mobile</code>. 手机号
     */
    public final TableField<CustomerRecord, String> MOBILE = createField("mobile", org.jooq.impl.SQLDataType.VARCHAR(11).nullable(false), this, "手机号");

    /**
     * The column <code>springboot_demo.customer.sex</code>. 性别：男，女
     */
    public final TableField<CustomerRecord, String> SEX = createField("sex", org.jooq.impl.SQLDataType.VARCHAR(1), this, "性别：男，女");

    /**
     * The column <code>springboot_demo.customer.locked</code>. 记录锁定：0表示可用，1表示锁定不可用
     */
    public final TableField<CustomerRecord, Byte> LOCKED = createField("locked", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "记录锁定：0表示可用，1表示锁定不可用");

    /**
     * The column <code>springboot_demo.customer.organization_id</code>. 客户所属组织级别
     */
    public final TableField<CustomerRecord, String> ORGANIZATION_ID = createField("organization_id", org.jooq.impl.SQLDataType.VARCHAR(200), this, "客户所属组织级别");

    /**
     * The column <code>springboot_demo.customer.organization_name</code>. 客户所属组织级别名称
     */
    public final TableField<CustomerRecord, String> ORGANIZATION_NAME = createField("organization_name", org.jooq.impl.SQLDataType.VARCHAR(200), this, "客户所属组织级别名称");

    /**
     * Create a <code>springboot_demo.customer</code> table reference
     */
    public Customer() {
        this(DSL.name("customer"), null);
    }

    /**
     * Create an aliased <code>springboot_demo.customer</code> table reference
     */
    public Customer(String alias) {
        this(DSL.name(alias), CUSTOMER);
    }

    /**
     * Create an aliased <code>springboot_demo.customer</code> table reference
     */
    public Customer(Name alias) {
        this(alias, CUSTOMER);
    }

    private Customer(Name alias, Table<CustomerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Customer(Name alias, Table<CustomerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("客户信息表"));
    }

    public <O extends Record> Customer(Table<O> child, ForeignKey<O, CustomerRecord> key) {
        super(child, key, CUSTOMER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SpringbootDemo.SPRINGBOOT_DEMO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CUSTOMER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CustomerRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CUSTOMER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CustomerRecord> getPrimaryKey() {
        return Keys.KEY_CUSTOMER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CustomerRecord>> getKeys() {
        return Arrays.<UniqueKey<CustomerRecord>>asList(Keys.KEY_CUSTOMER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Customer as(String alias) {
        return new Customer(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Customer as(Name alias) {
        return new Customer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Customer rename(String name) {
        return new Customer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Customer rename(Name name) {
        return new Customer(name, null);
    }
}
