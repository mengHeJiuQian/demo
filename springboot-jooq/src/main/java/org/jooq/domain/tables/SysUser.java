/*
 * This file is generated by jOOQ.
 */
package org.jooq.domain.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.domain.Indexes;
import org.jooq.domain.Keys;
import org.jooq.domain.SpringbootDemo;
import org.jooq.domain.tables.records.SysUserRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 用户表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysUser extends TableImpl<SysUserRecord> {

    private static final long serialVersionUID = -862856589;

    /**
     * The reference instance of <code>springboot_demo.sys_user</code>
     */
    public static final SysUser SYS_USER = new SysUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SysUserRecord> getRecordType() {
        return SysUserRecord.class;
    }

    /**
     * The column <code>springboot_demo.sys_user.id</code>. 编号
     */
    public final TableField<SysUserRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "编号");

    /**
     * The column <code>springboot_demo.sys_user.organization_id</code>. 组织机构编号
     */
    public final TableField<SysUserRecord, Long> ORGANIZATION_ID = createField("organization_id", org.jooq.impl.SQLDataType.BIGINT, this, "组织机构编号");

    /**
     * The column <code>springboot_demo.sys_user.username</code>. 用户名
     */
    public final TableField<SysUserRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(100), this, "用户名");

    /**
     * The column <code>springboot_demo.sys_user.password</code>. 密码
     */
    public final TableField<SysUserRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR(100), this, "密码");

    /**
     * The column <code>springboot_demo.sys_user.salt</code>. 盐值
     */
    public final TableField<SysUserRecord, String> SALT = createField("salt", org.jooq.impl.SQLDataType.VARCHAR(100), this, "盐值");

    /**
     * The column <code>springboot_demo.sys_user.role_ids</code>. 角色列表
     */
    public final TableField<SysUserRecord, String> ROLE_IDS = createField("role_ids", org.jooq.impl.SQLDataType.VARCHAR(100), this, "角色列表");

    /**
     * The column <code>springboot_demo.sys_user.group_ids</code>. 组列表
     */
    public final TableField<SysUserRecord, String> GROUP_IDS = createField("group_ids", org.jooq.impl.SQLDataType.VARCHAR(100), this, "组列表");

    /**
     * The column <code>springboot_demo.sys_user.locked</code>. 是否锁定
     */
    public final TableField<SysUserRecord, Byte> LOCKED = createField("locked", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "是否锁定");

    /**
     * Create a <code>springboot_demo.sys_user</code> table reference
     */
    public SysUser() {
        this(DSL.name("sys_user"), null);
    }

    /**
     * Create an aliased <code>springboot_demo.sys_user</code> table reference
     */
    public SysUser(String alias) {
        this(DSL.name(alias), SYS_USER);
    }

    /**
     * Create an aliased <code>springboot_demo.sys_user</code> table reference
     */
    public SysUser(Name alias) {
        this(alias, SYS_USER);
    }

    private SysUser(Name alias, Table<SysUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private SysUser(Name alias, Table<SysUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("用户表"));
    }

    public <O extends Record> SysUser(Table<O> child, ForeignKey<O, SysUserRecord> key) {
        super(child, key, SYS_USER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SpringbootDemo.SPRINGBOOT_DEMO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SYS_USER_IDX_SYS_USER_ORGANIZATION_ID, Indexes.SYS_USER_IDX_SYS_USER_USERNAME, Indexes.SYS_USER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SysUserRecord, Long> getIdentity() {
        return Keys.IDENTITY_SYS_USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SysUserRecord> getPrimaryKey() {
        return Keys.KEY_SYS_USER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SysUserRecord>> getKeys() {
        return Arrays.<UniqueKey<SysUserRecord>>asList(Keys.KEY_SYS_USER_PRIMARY, Keys.KEY_SYS_USER_IDX_SYS_USER_USERNAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SysUser as(String alias) {
        return new SysUser(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SysUser as(Name alias) {
        return new SysUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SysUser rename(String name) {
        return new SysUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SysUser rename(Name name) {
        return new SysUser(name, null);
    }
}
