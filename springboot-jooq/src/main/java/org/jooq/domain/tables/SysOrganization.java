/*
 * This file is generated by jOOQ.
 */
package org.jooq.domain.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.domain.Indexes;
import org.jooq.domain.Keys;
import org.jooq.domain.SpringbootDemo;
import org.jooq.domain.tables.records.SysOrganizationRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 组织机构表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysOrganization extends TableImpl<SysOrganizationRecord> {

    private static final long serialVersionUID = 1649173373;

    /**
     * The reference instance of <code>springboot_demo.sys_organization</code>
     */
    public static final SysOrganization SYS_ORGANIZATION = new SysOrganization();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SysOrganizationRecord> getRecordType() {
        return SysOrganizationRecord.class;
    }

    /**
     * The column <code>springboot_demo.sys_organization.id</code>. 编号
     */
    public final TableField<SysOrganizationRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "编号");

    /**
     * The column <code>springboot_demo.sys_organization.name</code>. 组织名称
     */
    public final TableField<SysOrganizationRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(100), this, "组织名称");

    /**
     * The column <code>springboot_demo.sys_organization.parent_id</code>. 父编号
     */
    public final TableField<SysOrganizationRecord, Long> PARENT_ID = createField("parent_id", org.jooq.impl.SQLDataType.BIGINT, this, "父编号");

    /**
     * The column <code>springboot_demo.sys_organization.parent_ids</code>. 父编号列表
     */
    public final TableField<SysOrganizationRecord, String> PARENT_IDS = createField("parent_ids", org.jooq.impl.SQLDataType.VARCHAR(100), this, "父编号列表");

    /**
     * The column <code>springboot_demo.sys_organization.available</code>. 是否有效
     */
    public final TableField<SysOrganizationRecord, Byte> AVAILABLE = createField("available", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "是否有效");

    /**
     * The column <code>springboot_demo.sys_organization.priority</code>. 优先级
     */
    public final TableField<SysOrganizationRecord, Integer> PRIORITY = createField("priority", org.jooq.impl.SQLDataType.INTEGER, this, "优先级");

    /**
     * The column <code>springboot_demo.sys_organization.leaf</code>. 叶子节点
     */
    public final TableField<SysOrganizationRecord, Byte> LEAF = createField("leaf", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "叶子节点");

    /**
     * Create a <code>springboot_demo.sys_organization</code> table reference
     */
    public SysOrganization() {
        this(DSL.name("sys_organization"), null);
    }

    /**
     * Create an aliased <code>springboot_demo.sys_organization</code> table reference
     */
    public SysOrganization(String alias) {
        this(DSL.name(alias), SYS_ORGANIZATION);
    }

    /**
     * Create an aliased <code>springboot_demo.sys_organization</code> table reference
     */
    public SysOrganization(Name alias) {
        this(alias, SYS_ORGANIZATION);
    }

    private SysOrganization(Name alias, Table<SysOrganizationRecord> aliased) {
        this(alias, aliased, null);
    }

    private SysOrganization(Name alias, Table<SysOrganizationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("组织机构表"));
    }

    public <O extends Record> SysOrganization(Table<O> child, ForeignKey<O, SysOrganizationRecord> key) {
        super(child, key, SYS_ORGANIZATION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SpringbootDemo.SPRINGBOOT_DEMO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SYS_ORGANIZATION_IDX_SYS_ORGANIZATION_PARENT_ID, Indexes.SYS_ORGANIZATION_IDX_SYS_ORGANIZATION_PARENT_IDS, Indexes.SYS_ORGANIZATION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SysOrganizationRecord, Long> getIdentity() {
        return Keys.IDENTITY_SYS_ORGANIZATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SysOrganizationRecord> getPrimaryKey() {
        return Keys.KEY_SYS_ORGANIZATION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SysOrganizationRecord>> getKeys() {
        return Arrays.<UniqueKey<SysOrganizationRecord>>asList(Keys.KEY_SYS_ORGANIZATION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SysOrganization as(String alias) {
        return new SysOrganization(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SysOrganization as(Name alias) {
        return new SysOrganization(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SysOrganization rename(String name) {
        return new SysOrganization(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SysOrganization rename(Name name) {
        return new SysOrganization(name, null);
    }
}
