/*
 * This file is generated by jOOQ.
 */
package org.jooq.domain.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.domain.Indexes;
import org.jooq.domain.Keys;
import org.jooq.domain.SpringbootDemo;
import org.jooq.domain.tables.records.SysLogRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 系统日志表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysLog extends TableImpl<SysLogRecord> {

    private static final long serialVersionUID = -1088128325;

    /**
     * The reference instance of <code>springboot_demo.sys_log</code>
     */
    public static final SysLog SYS_LOG = new SysLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SysLogRecord> getRecordType() {
        return SysLogRecord.class;
    }

    /**
     * The column <code>springboot_demo.sys_log.id</code>. 主键
     */
    public final TableField<SysLogRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>springboot_demo.sys_log.username</code>. 用户名
     */
    public final TableField<SysLogRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(100), this, "用户名");

    /**
     * The column <code>springboot_demo.sys_log.ip</code>. 用户ip
     */
    public final TableField<SysLogRecord, String> IP = createField("ip", org.jooq.impl.SQLDataType.VARCHAR(45), this, "用户ip");

    /**
     * The column <code>springboot_demo.sys_log.req_method</code>. 请求方法
     */
    public final TableField<SysLogRecord, String> REQ_METHOD = createField("req_method", org.jooq.impl.SQLDataType.VARCHAR(200), this, "请求方法");

    /**
     * The column <code>springboot_demo.sys_log.req_uri</code>. 请求URL
     */
    public final TableField<SysLogRecord, String> REQ_URI = createField("req_uri", org.jooq.impl.SQLDataType.CLOB, this, "请求URL");

    /**
     * The column <code>springboot_demo.sys_log.exec_method</code>. 执行方法
     */
    public final TableField<SysLogRecord, String> EXEC_METHOD = createField("exec_method", org.jooq.impl.SQLDataType.VARCHAR(200), this, "执行方法");

    /**
     * The column <code>springboot_demo.sys_log.exec_time</code>. 响应时间
     */
    public final TableField<SysLogRecord, Long> EXEC_TIME = createField("exec_time", org.jooq.impl.SQLDataType.BIGINT, this, "响应时间");

    /**
     * The column <code>springboot_demo.sys_log.args</code>. 参数
     */
    public final TableField<SysLogRecord, String> ARGS = createField("args", org.jooq.impl.SQLDataType.CLOB, this, "参数");

    /**
     * The column <code>springboot_demo.sys_log.return_val</code>. 返回值
     */
    public final TableField<SysLogRecord, String> RETURN_VAL = createField("return_val", org.jooq.impl.SQLDataType.CLOB, this, "返回值");

    /**
     * The column <code>springboot_demo.sys_log.exec_desc</code>. 描述
     */
    public final TableField<SysLogRecord, String> EXEC_DESC = createField("exec_desc", org.jooq.impl.SQLDataType.VARCHAR(200), this, "描述");

    /**
     * The column <code>springboot_demo.sys_log.status</code>. 状态
     */
    public final TableField<SysLogRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR(45), this, "状态");

    /**
     * The column <code>springboot_demo.sys_log.create_time</code>. 创建时间
     */
    public final TableField<SysLogRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * Create a <code>springboot_demo.sys_log</code> table reference
     */
    public SysLog() {
        this(DSL.name("sys_log"), null);
    }

    /**
     * Create an aliased <code>springboot_demo.sys_log</code> table reference
     */
    public SysLog(String alias) {
        this(DSL.name(alias), SYS_LOG);
    }

    /**
     * Create an aliased <code>springboot_demo.sys_log</code> table reference
     */
    public SysLog(Name alias) {
        this(alias, SYS_LOG);
    }

    private SysLog(Name alias, Table<SysLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private SysLog(Name alias, Table<SysLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("系统日志表"));
    }

    public <O extends Record> SysLog(Table<O> child, ForeignKey<O, SysLogRecord> key) {
        super(child, key, SYS_LOG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SpringbootDemo.SPRINGBOOT_DEMO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SYS_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SysLogRecord, Long> getIdentity() {
        return Keys.IDENTITY_SYS_LOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SysLogRecord> getPrimaryKey() {
        return Keys.KEY_SYS_LOG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SysLogRecord>> getKeys() {
        return Arrays.<UniqueKey<SysLogRecord>>asList(Keys.KEY_SYS_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SysLog as(String alias) {
        return new SysLog(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SysLog as(Name alias) {
        return new SysLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SysLog rename(String name) {
        return new SysLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SysLog rename(Name name) {
        return new SysLog(name, null);
    }
}
